55c55
<    ! Hard coding the 4 byte size of integers
---
>    ! Hardoding the 4 byte size of integers
221c221
<      INTEGER, PARAMETER  :: Lines_genr_info = 149
---
>      INTEGER, PARAMETER  :: Lines_genr_info = 339
590c590,591
<      ! zZI0LlLu  (z - is not fixed and can appear or disapperar
---
>      ! edited by dwaipayan
>      ! zZiILlLu  (z - is not fixed and can appear or disapperar
593,594c594
<      ! I  - ionisation
<      ! 0  - Not used
---
>      ! iI  - ionisation
598,599c598,600
<      !  1100102: Z = 1(Hydrogen), I = 1 (Neutral), 0, 01 = ground level, 02 = First excited
<      ! 19500317: Z = 19(K), I = 5(4x Ionised), 0, 03 = 3rd excited, 17 = 17th excited
---
>      ! 01010102: Z = 1(Hydrogen), I = 1 (Neutral), 0, 01 = ground level, 02 = First excited
>      ! 19050317: Z = 19(K), I = 5(4x Ionised), 0, 03 = 3rd excited, 17 = 17th excited
>      ! 26120317: Z = 26(Fe), I = 12(11x Ionised), 0, 03 = 3rd excited, 17 = 17th excited
603,604d603
<      ! ZZIILiLu
<      
608c607
<         OBJ%ID(ind,2) = (Line_ID(ind) - OBJ%ID(ind,1)*1000000)/100000
---
>         OBJ%ID(ind,2) = MOD(Line_ID(ind),1000000)/10000
611c610
<  
---
>         
613c612
<         IF( (OBJ%ID(ind,1)*1000000 + OBJ%ID(ind,2)*100000 + OBJ%ID(ind,3)*100 &
---
>         IF( (OBJ%ID(ind,1)*1000000 + OBJ%ID(ind,2)*10000 + OBJ%ID(ind,3)*100 &
619,621c618,626
<      ! Thech that the last entry of the file is correctly read
<      !  by comparing it to manually enterd value (Mast be changed id the list is changed)
<      IF((Lambda(Total_line_numb)/3.7174720d+07 - 1.0d0).GT.1.0d-8) THEN
---
>      ! Check that the last entry of the file is correctly read
>      !  by comparing it to manually enterd value (Must be changed id the list is changed)
>      
>      ! numbers changed according to the new database
>      ! edited by dwaipayan
>      ! master thesis data final wavelength 121600000.0
>      ! master thesis data final gf 0.00711855
>      !! these values are furthur updates on the lower temperature regimes - jun 24-2022       
>      IF((Lambda(Total_line_numb)/574700000.0 - 1.0d0).GT.1.0d-8) THEN
623c628
<         PRINT*,'  > Expected value:',3.7174720d+07
---
>         PRINT*,'  > Expected value:',574700000.0
626a632
>      ! old dataset highest value for wavelength : 3.7174720d+07
633,635c639,641
<      ! Thech that the last entry of the file is correctly read
<      !  by comparing it to manually enterd value (Mast be changed id the list is changed)
<      IF((gf_val(Total_line_numb)/1000.0 - 1.0d0).GT.1.0d-8) THEN
---
>      ! Check that the last entry of the file is correctly read
>      !  by comparing it to manually enterd value (Must be changed id the list is changed)
>      IF((gf_val(Total_line_numb)/0.000104004 - 1.0d0).GT.1.0d-8) THEN
637c643
<         PRINT*,'  > Expected value:',1000.0
---
>         PRINT*,'  > Expected value:',0.000104004
640a647
>      ! old dataset last value for gf : 0.037999999
711c718
<         ID = Z*1000000 + I*100000 + Ll*100 + Lu
---
>         ID = Z*1000000 + I*10000 + Ll*100 + Lu
721c728
<            IF( (OBJ%ID(ind,1)*1000000 + OBJ%ID(ind,2)*100000 + &
---
>            IF( (OBJ%ID(ind,1)*1000000 + OBJ%ID(ind,2)*10000 + &
819c826
<      INTEGER(I4B) :: idum, i
---
>      INTEGER(I4B) :: idum
903,904c910
<      !OPEN (UNIT=100, FILE=TRIM(DATA_DIR)//'/asplund_numabun_2009', STATUS='OLD',IOSTAT=IO_status)
<      OPEN (UNIT=100, FILE=TRIM(DATA_DIR)//'/number_abundance', STATUS='OLD',IOSTAT=IO_status)
---
>      OPEN (UNIT=100, FILE=TRIM(DATA_DIR)//'/abundan_solar_asplund_2009', STATUS='OLD',IOSTAT=IO_status)
907c913
<         PRINT*,'---- Error Opening the '//TRIM(DATA_DIR)//'/number_abundance file STATUS ', &
---
>         PRINT*,'---- Error Opening the '//TRIM(DATA_DIR)//'/abundan_solar_asplund_2009 file STATUS ', &
919,929c925,930
<      !IF (USE_H_normalisation) THEN
<      !   OBJ%Aboundance(:) = 10.0d0 ** (OBJ%Aboundance(:) - OBJ%Aboundance(1))
<      !ELSE
<      !   OBJ%Aboundance(:) = 10.0d0 ** (OBJ%Aboundance(:) - OBJ%Aboundance(2))
<      !END IF
<      
<      ! fix to read in abundances rather than 10**12 dex - DD
< 
<      !JS-ADD DEC 24:  always normalised to H here      
<      OBJ%Aboundance(:) = OBJ%Aboundance(:) !/OBJ%Aboundance(1)  
<         
---
>      IF (USE_H_normalisation) THEN
>         OBJ%Aboundance(:) = 10.0d0 ** (OBJ%Aboundance(:) - OBJ%Aboundance(1))
>      ELSE
>         OBJ%Aboundance(:) = 10.0d0 ** (OBJ%Aboundance(:) - OBJ%Aboundance(2))
>      END IF
>  
932,981c933,963
<      
<     
<      !IF (.NOT.USE_solar_composition) THEN
<      !   Mass_fractions(1) = X_frac ! set the H mass fraction  to X
<      !   Mass_fractions(2) = Y_frac ! set the He mass fraction to Y
<      !   Z_frac = MAX(0.0d0,1.0d0 - Mass_fractions(1) - Mass_fractions(2))
<      !   IF(ver) PRINT*,'  > Z fraction ',Z_frac
<      !   Mass_fractions(3:MaxZ) =  Mass_fractions(3:MaxZ)/SUM(Mass_fractions(3:MaxZ))*Z_frac
<  
<  
<      !   OBJ%X_frac = X_frac
<      !   OBJ%Y_frac = Y_frac
<  
<      !   OBJ%Aboundance(:) = Mass_fractions(:)/OBJ%Atomic_weight(:)
<      !   IF (USE_H_normalisation) THEN
<      !      OBJ%Aboundance(:) = OBJ%Aboundance(:)/OBJ%Aboundance(1)
<      !   ELSE
<      !      OBJ%Aboundance(:) = OBJ%Aboundance(:)/OBJ%Aboundance(2)
<      !   END IF
<      !ELSE
<      !   OBJ%X_frac = Mass_fractions(1)
<      !   OBJ%Y_frac = Mass_fractions(2)
<      !END IF
<      
<      !>  DD 
<      
<      X_frac = Mass_fractions(1)
<      Y_frac = Mass_fractions(2)
<      Z_frac = MAX(0.0d0,1.0d0 - Mass_fractions(1) - Mass_fractions(2))
<      
<      !MAX(0.0d0,1.0d0 - Mass_fractions(1) - Mass_fractions(2))
<      
<      ! Allocate the input X and Y mass fractions
<      OBJ%X_frac = X_frac
<      OBJ%Y_frac = Y_frac
<      Mass_fractions(3:MaxZ) = Mass_fractions(3:MaxZ)/SUM(Mass_fractions(3:MaxZ))*Z_frac
<      
<      OBJ%Aboundance(:) = OBJ%Aboundance(:)
<      
<      
<      
<      !print*, X_frac, Y_frac, Z_frac
<      !stop
<      !JS-TEST: Dec 24 
<      !print*,'Mass and number fractions (H,He...):'
<      !do i=1,MaxZ
<      !   print*, Mass_fractions(i),OBJ%Aboundance(i) 
<      !enddo
<      !stop 'tee...'
<      
---
>  
>      ! If there is the  input X and Y fractions presentthan
>      ! here we set the Mass fraction of H and He to input X and Y
>      ! and renormilize metal mass fractions of solar mixture to agree with input X Y.
>      IF (.NOT.USE_solar_composition) THEN
>         Mass_fractions(1) = X_frac ! set the H mass fraction  to X
>         Mass_fractions(2) = Y_frac ! set the He mass fraction to Y
>         ! normalaze the summed mass fraction of the metals so that
>         ! resulting Z = 1 - X - Y
>         Z_frac = MAX(0.0d0,1.0d0 - Mass_fractions(1) - Mass_fractions(2))
>         IF(ver) PRINT*,'  > Z fraction ',Z_frac
>         Mass_fractions(3:MaxZ) =  Mass_fractions(3:MaxZ)/SUM(Mass_fractions(3:MaxZ))*Z_frac
>  
>  
>         ! Allocate the input X and Y mass fractions
>         OBJ%X_frac = X_frac
>         OBJ%Y_frac = Y_frac
>  
>         ! update the number dencities to with new mass fractions
>         OBJ%Aboundance(:) = Mass_fractions(:)/OBJ%Atomic_weight(:)
>         ! here we normalise abandences back to H or He depending if there is Y aboundance and compute mass fractions for solar mixture.
>         IF (USE_H_normalisation) THEN
>            OBJ%Aboundance(:) = OBJ%Aboundance(:)/OBJ%Aboundance(1)
>         ELSE
>            OBJ%Aboundance(:) = OBJ%Aboundance(:)/OBJ%Aboundance(2)
>         END IF
>      ELSE
>         OBJ%X_frac = Mass_fractions(1)
>         OBJ%Y_frac = Mass_fractions(2)
>      END IF
>  
1041,1042d1022
<      
<      
1046c1026
<      ELSE IF (OBJ%X_frac .EQ. 0.0d0 .AND. OBJ%Y_frac .NE. 0.0d0) THEN
---
>      ELSE
1049,1051d1028
<      ELSE
<         IF(ver) PRINT*, '  - Using the Z mass fraction for computations'
<         OBJ%Nuclei(:) = rho*OBJ%Aboundance(:)*(1 - OBJ%X_frac - OBJ%Y_frac)/(12.0d0*OBJ%mH)    
1053c1030
<      
---
>  
1204a1182
>      ! edited by dwaipayan -- the occupation number/ions > 1d-2, otherwise doesn't converge  
1207c1185,1189
<            IF ( SUM(OBJ%Occupation(:,I,Z))/OBJ%Ions(I,Z) - 1 .GT. 1.0d-6 ) THEN
---
>            IF ( SUM(OBJ%Occupation(:,I,Z))/OBJ%Ions(I,Z) - 1 .GT. 1.0d-2 ) THEN
>               PRINT*, '--- Printing out the occupation numbers ---'
>               PRINT*, 'Sum of occupation numbers -->', SUM(OBJ%Occupation(:,I,Z))
>               PRINT*, 'Ions -->', OBJ%Ions(I,Z)
>               PRINT*, 'Sum of occupation numbers/Ions -->', SUM(OBJ%Occupation(:,I,Z))/OBJ%Ions(I,Z) 
1208a1191
>               
